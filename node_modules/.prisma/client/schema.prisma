generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  username    String
  email       String    @unique
  password    String
  role        String    @default("user")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  rendedBooks Book[]
  rents       Rent[]
  penalties   Penalty[]
}

model Book {
  id           Int                @id @default(autoincrement())
  title        String
  description  String
  author       Author?            @relation(fields: [authorId], references: [id])
  authorId     Int
  year         String
  categories   CategoriesOnBook[]
  image        String
  rendedBy     User?              @relation(fields: [rentedById], references: [id])
  rentedById   Int?
  isAvailable  Boolean            @default(true)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  rents        Rent[]
  activeRent   Rent?              @relation("ActiveRent", fields: [activeRentId], references: [id])
  activeRentId Int?               @unique
  Penalty      Penalty[]
}

model Rent {
  id            Int       @id @default(autoincrement())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  book          Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId        Int
  from          DateTime
  until         DateTime
  status        String
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  penalties     Penalty[]
  activeBookId  Int?
  activeBookFor Book?     @relation("ActiveRent")
}

model Category {
  id    Int                @id @default(autoincrement())
  key   String
  title String
  books CategoriesOnBook[]
}

model CategoriesOnBook {
  id         Int       @id @default(autoincrement())
  book       Book      @relation(fields: [bookId], references: [id])
  bookId     Int
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
}

model Author {
  id   Int    @id @default(autoincrement())
  name String
  Book Book[]
}

model Penalty {
  id        Int      @id @default(autoincrement())
  rent      Rent     @relation(fields: [rentId], references: [id])
  rentId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    Int
  from      DateTime
  until     DateTime
  status    String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
